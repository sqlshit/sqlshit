#!/usr/bin/env sh
set -eu
SQLSHIT_VERSION='0.0.3'
SQLSHIT_DEV=0

# ansi/tput helpers (posix)

ansi_init() {
  if command -v tput >/dev/null 2>&1; then
    cols="$(tput cols 2>/dev/null || printf '80')"
    lines="$(tput lines 2>/dev/null || printf '24')"
    clear="$(tput clear 2>/dev/null || printf '\033[2J\033[H')"
    bold="$(tput bold 2>/dev/null || printf '')"
    sgr0="$(tput sgr0 2>/dev/null || printf '\033[0m')"
  else
    cols="80"; lines="24"
    clear="$(printf '\033[2J\033[H')"
    bold=""; sgr0=""
  fi
  UI_COLS="$cols"; UI_LINES="$lines"; UI_CLEAR="$clear"; UI_BOLD="$bold"; UI_SGR0="$sgr0"
}

ansi_cls()   { printf '%s' "${UI_CLEAR:-$(printf '\033[2J\033[H')}"; }
ansi_goto()  { printf '\033[%s;%sH' "$1" "$2"; }  # row col (1-based)
ansi_bold()  { printf '%s' "${UI_BOLD:-}"; }
ansi_reset() { printf '%s' "${UI_SGR0:-}"; }
# simple welcome screen; press q to exit

_w_platform() {
  case "$(uname -s)" in
    Darwin) printf 'macOS' ;;
    Linux)
      if [ -f /etc/os-release ]; then
        . /etc/os-release
        printf '%s' "${NAME:-Linux}"
      else
        printf 'Linux'
      fi
      ;;
    *) printf 'Unknown OS' ;;
  esac
}

_w_title() {
  plat="$(_w_platform)"
  # SQLSHIT_VERSION already includes -dev when running via ./sqlshit
  printf 'sqlshit-%s for %s' "${SQLSHIT_VERSION:-0.0.0}" "$plat"
}

welcome_draw() {
  ansi_cls
  ansi_goto 1 2; ansi_bold; printf '%s' "$(_w_title)"; ansi_reset
  ansi_goto 3 2; ansi_bold; printf 'welcome to sqlshit'; ansi_reset
  ansi_goto 5 2; printf 'press q to exit.'
}

welcome_loop() {
  if command -v stty >/dev/null 2>&1; then
    STTY_OLD="$(stty -g)"
    trap 'stty "$STTY_OLD" >/dev/null 2>&1 || true; ansi_reset; printf "\n"; exit 0' INT TERM EXIT
    stty -echo -icanon time 0 min 0 2>/dev/null || true
  fi

  while :; do
    ansi_init
    welcome_draw
    key=''
    IFS= read -r -n 1 key 2>/dev/null || true
    [ "$key" = "q" ] && break
    sleep 0.1
  done

  if [ -n "${STTY_OLD:-}" ]; then
    stty "$STTY_OLD" >/dev/null 2>&1 || true
  fi
  ansi_reset
  printf '\n'
}
# main entry (posix)

# run from repo root in dev
cd "$(git rev-parse --show-toplevel 2>/dev/null || pwd)"

# dev defaults + banner
if [ "${SHIT_DEV:-0}" = "1" ]; then
  : "${SHIT_LOG:=debug}"; export SHIT_LOG
  printf '%s\n' "🛠️  sqlshit dev mode enabled"
  printf '%s\n' "    log level: ${SHIT_LOG}"
  printf '%s\n' "    color: ${SHIT_COLOR:-auto}"
fi

# project env
SHIT_ROOT="$(pwd)"; export SHIT_ROOT
PATH="$SHIT_ROOT/src:$PATH"; export PATH

# load modules (in dev these are files; in prod they’re already concatenated)
[ -f "$SHIT_ROOT/src/ui/ansi.sh" ]    && . "$SHIT_ROOT/src/ui/ansi.sh"
[ -f "$SHIT_ROOT/src/ui/welcome.sh" ] && . "$SHIT_ROOT/src/ui/welcome.sh"

_detect_platform() {
  case "$(uname -s)" in
    Darwin) printf 'macOS' ;;
    Linux)  [ -f /etc/os-release ] && { . /etc/os-release; printf '%s' "${NAME:-Linux}"; } || printf 'Linux' ;;
    *)      printf 'Unknown OS' ;;
  esac
}

_show_version() {
  plat="$(_detect_platform)"
  printf '%s\n' "sqlshit-${SQLSHIT_VERSION:-0.0.0} for ${plat}"
}

_show_help() {
  printf '%s\n' "usage: sqlshit [--version] [--help]"
  printf '%s\n' "       sqlshit (no args) -> welcome screen"
}

main() {
  case "${1:-}" in
    --version|-v) _show_version; exit 0 ;;
    --help|-h|help) _show_help; exit 0 ;;
    "") ansi_init; welcome_loop; exit 0 ;;
    *) printf '%s\n' "error: unknown option $1"; exit 2 ;;
  esac
}
main "$@"
